From 75177efdf1bb6987eff07a76a2a4cac9c1c70a1b Mon Sep 17 00:00:00 2001
From: Neeraj Deshpande <neeraj.deshpande@valuelabs.com>
Date: Sat, 30 Jan 2016 20:19:40 +0530
Subject: [PATCH] Full Screen API support

---
 Source/WebCore/dom/Document.cpp                    |  7 ++++
 Source/WebKit2/Shared/WebPreferencesDefinitions.h  |  2 +-
 .../WebKit2/UIProcess/API/wpe/PageClientImpl.cpp   | 39 ++++++++++++++++++++++
 Source/WebKit2/UIProcess/API/wpe/PageClientImpl.h  | 23 ++++++++++++-
 4 files changed, 69 insertions(+), 2 deletions(-)

diff --git a/Source/WebCore/dom/Document.cpp b/Source/WebCore/dom/Document.cpp
index 0e7c61f..707de20 100644
--- a/Source/WebCore/dom/Document.cpp
+++ b/Source/WebCore/dom/Document.cpp
@@ -5702,6 +5702,9 @@ void Document::requestFullScreenForElement(Element* element, unsigned short flag
         m_areKeysEnabledInFullScreen = flags & Element::ALLOW_KEYBOARD_INPUT;
         page()->chrome().client().enterFullScreenForElement(element);
 
+	    webkitWillEnterFullScreenForElement(element);
+	    webkitDidEnterFullScreenForElement(element);
+
         // 7. Optionally, display a message indicating how the user can exit displaying the context object fullscreen.
         return;
     } while (0);
@@ -5793,6 +5796,10 @@ void Document::webkitExitFullscreen()
     // full screen stack.
     if (!newTop) {
         page()->chrome().client().exitFullScreenForElement(m_fullScreenElement.get());
+
+        webkitWillExitFullScreenForElement(m_fullScreenElement.get());
+        webkitDidExitFullScreenForElement(m_fullScreenElement.get());
+
         return;
     }
 
diff --git a/Source/WebKit2/Shared/WebPreferencesDefinitions.h b/Source/WebKit2/Shared/WebPreferencesDefinitions.h
index 30d9f22..1534d61 100644
--- a/Source/WebKit2/Shared/WebPreferencesDefinitions.h
+++ b/Source/WebKit2/Shared/WebPreferencesDefinitions.h
@@ -135,7 +135,7 @@
     macro(DOMPasteAllowed, domPasteAllowed, Bool, bool, false) \
     macro(JavaScriptCanAccessClipboard, javaScriptCanAccessClipboard, Bool, bool, false) \
     macro(ShouldPrintBackgrounds, shouldPrintBackgrounds, Bool, bool, DEFAULT_SHOULD_PRINT_BACKGROUNDS) \
-    macro(FullScreenEnabled, fullScreenEnabled, Bool, bool, false) \
+    macro(FullScreenEnabled, fullScreenEnabled, Bool, bool, true) \
     macro(AsynchronousSpellCheckingEnabled, asynchronousSpellCheckingEnabled, Bool, bool, false) \
     macro(WebSecurityEnabled, webSecurityEnabled, Bool, bool, true) \
     macro(AllowUniversalAccessFromFileURLs, allowUniversalAccessFromFileURLs, Bool, bool, false) \
diff --git a/Source/WebKit2/UIProcess/API/wpe/PageClientImpl.cpp b/Source/WebKit2/UIProcess/API/wpe/PageClientImpl.cpp
index 5725699..6581a07 100644
--- a/Source/WebKit2/UIProcess/API/wpe/PageClientImpl.cpp
+++ b/Source/WebKit2/UIProcess/API/wpe/PageClientImpl.cpp
@@ -272,4 +272,43 @@ void PageClientImpl::didRestoreScrollPosition()
 {
 }
 
+#if ENABLE(FULLSCREEN_API)
+WebFullScreenManagerProxyClient& PageClientImpl::fullScreenManagerProxyClient()
+{
+    return *this;
+}
+
+void PageClientImpl::closeFullScreenManager()
+{
+}
+
+bool PageClientImpl::isFullScreen()
+{
+	return true;
+}
+
+void PageClientImpl::enterFullScreen()
+{
+	return;
+}
+
+void PageClientImpl::exitFullScreen()
+{
+	return;
+}
+
+void PageClientImpl::beganEnterFullScreen(
+
+     const WebCore::IntRect& /* initialFrame */, const WebCore::IntRect& /* finalFrame */)
+{
+}
+
+void PageClientImpl::beganExitFullScreen(
+
+     const WebCore::IntRect& /* initialFrame */, const WebCore::IntRect& /* finalFrame */)
+{
+}
+
+#endif // ENABLE(FULLSCREEN_API)
+
 } // namespace WebKit
diff --git a/Source/WebKit2/UIProcess/API/wpe/PageClientImpl.h b/Source/WebKit2/UIProcess/API/wpe/PageClientImpl.h
index 782097a..4eabc72 100644
--- a/Source/WebKit2/UIProcess/API/wpe/PageClientImpl.h
+++ b/Source/WebKit2/UIProcess/API/wpe/PageClientImpl.h
@@ -27,6 +27,7 @@
 #define PageClientImpl_h
 
 #include "PageClient.h"
+#include "WebFullScreenManagerProxy.h"
 
 namespace WKWPE {
 class View;
@@ -34,7 +35,12 @@ class View;
 
 namespace WebKit {
 
-class PageClientImpl final : public PageClient {
+class PageClientImpl final : public PageClient 
+#if ENABLE(FULLSCREEN_API)
+    , public WebFullScreenManagerProxyClient
+#endif
+
+{
 public:
     PageClientImpl(WKWPE::View&);
 
@@ -115,6 +121,21 @@ private:
 
     virtual void didRestoreScrollPosition() override;
 
+    // Auxiliary Client Creation
+#if ENABLE(FULLSCREEN_API)
+    virtual WebFullScreenManagerProxyClient& fullScreenManagerProxyClient() final;
+#endif
+
+#if ENABLE(FULLSCREEN_API)
+    // WebFullScreenManagerProxyClient
+    virtual void closeFullScreenManager() override;
+    virtual bool isFullScreen() override;
+    virtual void enterFullScreen() override;
+    virtual void exitFullScreen() override;
+    virtual void beganEnterFullScreen(const WebCore::IntRect& initialFrame, const WebCore::IntRect& finalFrame) override;
+    virtual void beganExitFullScreen(const WebCore::IntRect& initialFrame, const WebCore::IntRect& finalFrame) override;
+#endif
+
     WKWPE::View& m_view;
 };
 
-- 
1.9.1

