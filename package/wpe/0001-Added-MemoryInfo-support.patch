From 9ee087bdc0baa847e24a8f6ff3f4fc8a91148a9c Mon Sep 17 00:00:00 2001
From: Neeraj Ravindra Deshpande <neeraj.deshpande@valuelabs.com>
Date: Thu, 7 Jan 2016 03:30:32 +0530
Subject: [PATCH] Added MemoryInfo support.

---
 Source/WebCore/CMakeLists.txt       |  2 ++
 Source/WebCore/page/MemoryInfo.cpp  | 48 ++++++++++++++++++++++++++++
 Source/WebCore/page/MemoryInfo.h    | 62 +++++++++++++++++++++++++++++++++++++
 Source/WebCore/page/MemoryInfo.idl  |  8 +++++
 Source/WebCore/page/Performance.cpp |  6 +++-
 Source/WebCore/page/Performance.h   |  4 +++
 Source/WebCore/page/Performance.idl |  1 +
 7 files changed, 130 insertions(+), 1 deletion(-)
 create mode 100644 Source/WebCore/page/MemoryInfo.cpp
 create mode 100644 Source/WebCore/page/MemoryInfo.h
 create mode 100644 Source/WebCore/page/MemoryInfo.idl

diff --git a/Source/WebCore/CMakeLists.txt b/Source/WebCore/CMakeLists.txt
index 7ac80a6..81afd87 100644
--- a/Source/WebCore/CMakeLists.txt
+++ b/Source/WebCore/CMakeLists.txt
@@ -599,6 +599,7 @@ set(WebCore_NON_SVG_IDL_FILES
     page/Location.idl
     page/Navigator.idl
     page/Performance.idl
+    page/MemoryInfo.idl
     page/PerformanceEntry.idl
     page/PerformanceEntryList.idl
     page/PerformanceMark.idl
@@ -2014,6 +2015,7 @@ set(WebCore_SOURCES
     page/PageThrottler.cpp
     page/PageVisibilityState.cpp
     page/Performance.cpp
+    page/MemoryInfo.cpp
     page/PerformanceEntry.cpp
     page/PerformanceEntryList.cpp
     page/PerformanceNavigation.cpp
diff --git a/Source/WebCore/page/MemoryInfo.cpp b/Source/WebCore/page/MemoryInfo.cpp
new file mode 100644
index 0000000..b9b3f92
--- /dev/null
+++ b/Source/WebCore/page/MemoryInfo.cpp
@@ -0,0 +1,48 @@
+/*
+ * Copyright (C) 2010 Google Inc. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met:
+ *
+ *     * Redistributions of source code must retain the above copyright
+ * notice, this list of conditions and the following disclaimer.
+ *     * Redistributions in binary form must reproduce the above
+ * copyright notice, this list of conditions and the following disclaimer
+ * in the documentation and/or other materials provided with the
+ * distribution.
+ *     * Neither the name of Google Inc. nor the names of its
+ * contributors may be used to endorse or promote products derived from
+ * this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#include "config.h"
+#include "MemoryInfo.h"
+
+#include "Frame.h"
+#include "JSDOMWindow.h"
+
+namespace WebCore {
+
+MemoryInfo::MemoryInfo(Frame* frame)
+    : DOMWindowProperty(frame)
+{
+    m_totalJSHeapSize = JSDOMWindow::commonVM().heap.capacity();
+    m_usedJSHeapSize = JSDOMWindow::commonVM().heap.size();
+    m_jsHeapSizeLimit = 0;
+}
+
+} // namespace WebCore
+
diff --git a/Source/WebCore/page/MemoryInfo.h b/Source/WebCore/page/MemoryInfo.h
new file mode 100644
index 0000000..72a2fa4
--- /dev/null
+++ b/Source/WebCore/page/MemoryInfo.h
@@ -0,0 +1,62 @@
+/*
+ * Copyright (C) 2010 Google Inc. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met:
+ *
+ *     * Redistributions of source code must retain the above copyright
+ * notice, this list of conditions and the following disclaimer.
+ *     * Redistributions in binary form must reproduce the above
+ * copyright notice, this list of conditions and the following disclaimer
+ * in the documentation and/or other materials provided with the
+ * distribution.
+ *     * Neither the name of Google Inc. nor the names of its
+ * contributors may be used to endorse or promote products derived from
+ * this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#ifndef MemoryInfo_h
+#define MemoryInfo_h
+
+#include "DOMWindowProperty.h"
+
+#include <wtf/PassRefPtr.h>
+#include <wtf/RefCounted.h>
+
+namespace WebCore {
+
+class Frame;
+
+class MemoryInfo : public RefCounted<MemoryInfo>, public DOMWindowProperty {
+public:
+    static Ref<MemoryInfo> create(Frame* frame) { return adoptRef(*new MemoryInfo(frame)); }
+
+    size_t totalJSHeapSize() const { return m_totalJSHeapSize; }
+    size_t usedJSHeapSize() const { return m_usedJSHeapSize; }
+    size_t jsHeapSizeLimit() const { return m_jsHeapSizeLimit; }
+
+private:
+    explicit MemoryInfo(Frame*);
+
+    size_t m_totalJSHeapSize;
+    size_t m_usedJSHeapSize;
+    size_t m_jsHeapSizeLimit;
+};
+
+} // namespace WebCore
+
+#endif // MemoryInfo_h
+
diff --git a/Source/WebCore/page/MemoryInfo.idl b/Source/WebCore/page/MemoryInfo.idl
new file mode 100644
index 0000000..61386ee
--- /dev/null
+++ b/Source/WebCore/page/MemoryInfo.idl
@@ -0,0 +1,8 @@
+[
+] interface MemoryInfo {
+
+	readonly attribute unsigned long totalJSHeapSize;
+	readonly attribute unsigned long usedJSHeapSize;
+	readonly attribute unsigned long jsHeapSizeLimit;
+};
+
diff --git a/Source/WebCore/page/Performance.cpp b/Source/WebCore/page/Performance.cpp
index bb2932c..dc12248 100644
--- a/Source/WebCore/page/Performance.cpp
+++ b/Source/WebCore/page/Performance.cpp
@@ -28,7 +28,6 @@
  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  */
-
 #include "config.h"
 
 #if ENABLE(WEB_TIMING)
@@ -235,6 +234,11 @@ double Performance::now() const
     return 1000.0 * floor(nowSeconds / resolutionSeconds) * resolutionSeconds;
 }
 
+PassRefPtr<MemoryInfo> Performance::memory() const
+{
+    return MemoryInfo::create(m_frame);
+}
+
 } // namespace WebCore
 
 #endif // ENABLE(WEB_TIMING)
diff --git a/Source/WebCore/page/Performance.h b/Source/WebCore/page/Performance.h
index b47afca..b95bc5c 100644
--- a/Source/WebCore/page/Performance.h
+++ b/Source/WebCore/page/Performance.h
@@ -45,6 +45,8 @@
 #include <wtf/RefPtr.h>
 #include <wtf/text/WTFString.h>
 
+#include "MemoryInfo.h"
+
 namespace WebCore {
 
 class Document;
@@ -64,6 +66,8 @@ public:
     PerformanceTiming* timing() const;
     double now() const;
 
+    PassRefPtr<MemoryInfo> memory() const;
+
 #if ENABLE(PERFORMANCE_TIMELINE)
     PassRefPtr<PerformanceEntryList> webkitGetEntries() const;
     PassRefPtr<PerformanceEntryList> webkitGetEntriesByType(const String& entryType);
diff --git a/Source/WebCore/page/Performance.idl b/Source/WebCore/page/Performance.idl
index 81117d2..57787b7 100644
--- a/Source/WebCore/page/Performance.idl
+++ b/Source/WebCore/page/Performance.idl
@@ -36,6 +36,7 @@
 ] interface Performance {
     readonly attribute PerformanceNavigation navigation;
     readonly attribute PerformanceTiming timing;
+    readonly attribute MemoryInfo memory;
 
 #if defined(ENABLE_PERFORMANCE_TIMELINE) && ENABLE_PERFORMANCE_TIMELINE
     PerformanceEntryList webkitGetEntries();
-- 
1.9.1

